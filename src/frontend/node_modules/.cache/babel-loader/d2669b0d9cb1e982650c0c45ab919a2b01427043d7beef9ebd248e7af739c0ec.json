{"ast":null,"code":"import React,{useEffect,useRef}from'react';import{formatTime,getUserInitials,generateAvatarColor,getMessageTypeIcon}from'../../utils/helpers';import Loading from'../Common/Loading';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MessageList=_ref=>{let{messages,currentUser,loading,activeChat,activeChatType}=_ref;const messagesEndRef=useRef(null);const messagesContainerRef=useRef(null);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};useEffect(()=>{scrollToBottom();},[messages]);const isOwnMessage=message=>{return message.senderId===(currentUser===null||currentUser===void 0?void 0:currentUser.id);};const getMessageSender=message=>{if(isOwnMessage(message)){return currentUser;}// For group messages, we need to find the sender\n// This is a simplified approach - in a real app, you'd want to cache user info\nreturn{id:message.senderId,name:message.senderId,// Fallback to ID if name not available\navatar:null};};const shouldShowAvatar=(message,index)=>{if(index===0)return true;const prevMessage=messages[index-1];return prevMessage.senderId!==message.senderId;};const shouldShowTimestamp=(message,index)=>{if(index===0)return true;const prevMessage=messages[index-1];const timeDiff=Number(message.timestamp)-Number(prevMessage.timestamp);// Show timestamp if more than 5 minutes apart\nreturn timeDiff>300000000000;// 5 minutes in nanoseconds\n};if(!activeChat){return/*#__PURE__*/_jsxs(\"div\",{className:\"empty-chat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-chat-icon\",children:\"\\uD83D\\uDCAC\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Welcome to ICP Chat\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Select a user or group to start chatting\"})]});}if(loading&&messages.length===0){return/*#__PURE__*/_jsx(Loading,{message:\"Loading messages...\"});}if(messages.length===0){return/*#__PURE__*/_jsxs(\"div\",{className:\"empty-messages\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-messages-icon\",children:activeChatType==='group'?'ðŸ‘¥':'ðŸ‘¤'}),/*#__PURE__*/_jsx(\"h3\",{children:\"No messages yet\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Start the conversation with \",activeChat.name]})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"message-list\",ref:messagesContainerRef,children:[messages.map((message,index)=>{const sender=getMessageSender(message);const isOwn=isOwnMessage(message);const showAvatar=shouldShowAvatar(message,index);const showTimestamp=shouldShowTimestamp(message,index);return/*#__PURE__*/_jsxs(\"div\",{className:\"message-wrapper\",children:[showTimestamp&&/*#__PURE__*/_jsx(\"div\",{className:\"message-timestamp-divider\",children:/*#__PURE__*/_jsx(\"span\",{children:formatTime(message.timestamp)})}),/*#__PURE__*/_jsxs(\"div\",{className:`message ${isOwn?'own':''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"message-avatar-container\",children:[showAvatar&&!isOwn&&/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar\",style:{backgroundColor:generateAvatarColor(sender.id)},children:getUserInitials(sender.name)}),!showAvatar&&!isOwn&&/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar-spacer\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[showAvatar&&!isOwn&&activeChatType==='group'&&/*#__PURE__*/_jsx(\"div\",{className:\"message-sender\",children:sender.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-bubble\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-type-icon\",children:getMessageTypeIcon(message.messageType)}),/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.content}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-time\",children:[formatTime(message.timestamp),isOwn&&/*#__PURE__*/_jsx(\"span\",{className:`message-status ${message.isRead?'read':'sent'}`,children:message.isRead?'âœ“âœ“':'âœ“'})]})]})]})]})]},message.id);}),loading&&/*#__PURE__*/_jsx(\"div\",{className:\"loading-messages\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-dots\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]});};export default MessageList;","map":{"version":3,"names":["React","useEffect","useRef","formatTime","getUserInitials","generateAvatarColor","getMessageTypeIcon","Loading","jsx","_jsx","jsxs","_jsxs","MessageList","_ref","messages","currentUser","loading","activeChat","activeChatType","messagesEndRef","messagesContainerRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","isOwnMessage","message","senderId","id","getMessageSender","name","avatar","shouldShowAvatar","index","prevMessage","shouldShowTimestamp","timeDiff","Number","timestamp","className","children","length","ref","map","sender","isOwn","showAvatar","showTimestamp","style","backgroundColor","messageType","content","isRead"],"sources":["/Users/ridhoauliarahman/Library/CloudStorage/GoogleDrive-ridho.aulia7324@gmail.com/My Drive/ICP/icp-chat-app/src/frontend/src/components/Chat/MessageList.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { formatTime, getUserInitials, generateAvatarColor, getMessageTypeIcon } from '../../utils/helpers';\nimport Loading from '../Common/Loading';\n\nconst MessageList = ({ \n  messages, \n  currentUser, \n  loading, \n  activeChat, \n  activeChatType \n}) => {\n  const messagesEndRef = useRef(null);\n  const messagesContainerRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const isOwnMessage = (message) => {\n    return message.senderId === currentUser?.id;\n  };\n\n  const getMessageSender = (message) => {\n    if (isOwnMessage(message)) {\n      return currentUser;\n    }\n    \n    // For group messages, we need to find the sender\n    // This is a simplified approach - in a real app, you'd want to cache user info\n    return {\n      id: message.senderId,\n      name: message.senderId, // Fallback to ID if name not available\n      avatar: null\n    };\n  };\n\n  const shouldShowAvatar = (message, index) => {\n    if (index === 0) return true;\n    \n    const prevMessage = messages[index - 1];\n    return prevMessage.senderId !== message.senderId;\n  };\n\n  const shouldShowTimestamp = (message, index) => {\n    if (index === 0) return true;\n    \n    const prevMessage = messages[index - 1];\n    const timeDiff = Number(message.timestamp) - Number(prevMessage.timestamp);\n    \n    // Show timestamp if more than 5 minutes apart\n    return timeDiff > 300000000000; // 5 minutes in nanoseconds\n  };\n\n  if (!activeChat) {\n    return (\n      <div className=\"empty-chat\">\n        <div className=\"empty-chat-icon\">ðŸ’¬</div>\n        <h3>Welcome to ICP Chat</h3>\n        <p>Select a user or group to start chatting</p>\n      </div>\n    );\n  }\n\n  if (loading && messages.length === 0) {\n    return <Loading message=\"Loading messages...\" />;\n  }\n\n  if (messages.length === 0) {\n    return (\n      <div className=\"empty-messages\">\n        <div className=\"empty-messages-icon\">\n          {activeChatType === 'group' ? 'ðŸ‘¥' : 'ðŸ‘¤'}\n        </div>\n        <h3>No messages yet</h3>\n        <p>Start the conversation with {activeChat.name}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"message-list\" ref={messagesContainerRef}>\n      {messages.map((message, index) => {\n        const sender = getMessageSender(message);\n        const isOwn = isOwnMessage(message);\n        const showAvatar = shouldShowAvatar(message, index);\n        const showTimestamp = shouldShowTimestamp(message, index);\n\n        return (\n          <div key={message.id} className=\"message-wrapper\">\n            {showTimestamp && (\n              <div className=\"message-timestamp-divider\">\n                <span>{formatTime(message.timestamp)}</span>\n              </div>\n            )}\n            \n            <div className={`message ${isOwn ? 'own' : ''}`}>\n              <div className=\"message-avatar-container\">\n                {showAvatar && !isOwn && (\n                  <div\n                    className=\"message-avatar\"\n                    style={{ backgroundColor: generateAvatarColor(sender.id) }}\n                  >\n                    {getUserInitials(sender.name)}\n                  </div>\n                )}\n                {!showAvatar && !isOwn && (\n                  <div className=\"message-avatar-spacer\"></div>\n                )}\n              </div>\n\n              <div className=\"message-content\">\n                {showAvatar && !isOwn && activeChatType === 'group' && (\n                  <div className=\"message-sender\">{sender.name}</div>\n                )}\n                \n                <div className=\"message-bubble\">\n                  <div className=\"message-type-icon\">\n                    {getMessageTypeIcon(message.messageType)}\n                  </div>\n                  <div className=\"message-text\">{message.content}</div>\n                  <div className=\"message-time\">\n                    {formatTime(message.timestamp)}\n                    {isOwn && (\n                      <span className={`message-status ${message.isRead ? 'read' : 'sent'}`}>\n                        {message.isRead ? 'âœ“âœ“' : 'âœ“'}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      \n      {loading && (\n        <div className=\"loading-messages\">\n          <div className=\"loading-dots\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        </div>\n      )}\n      \n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nexport default MessageList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}