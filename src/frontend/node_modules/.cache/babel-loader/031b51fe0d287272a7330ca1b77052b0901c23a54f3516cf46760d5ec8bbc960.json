{"ast":null,"code":"import { Principal } from '@dfinity/principal';\nimport { AgentError } from '../../errors';\nimport { AnonymousIdentity } from '../../auth';\nimport * as cbor from '../../cbor';\nimport { requestIdOf } from '../../request_id';\nimport { fromHex } from '../../utils/buffer';\nimport { Expiry, httpHeadersTransform, makeNonceTransform } from './transforms';\nimport { makeNonce, SubmitRequestType } from './types';\nimport { AgentHTTPResponseError } from './errors';\nexport * from './transforms';\nexport { makeNonce } from './types';\nexport var RequestStatusResponseStatus;\n(function (RequestStatusResponseStatus) {\n  RequestStatusResponseStatus[\"Received\"] = \"received\";\n  RequestStatusResponseStatus[\"Processing\"] = \"processing\";\n  RequestStatusResponseStatus[\"Replied\"] = \"replied\";\n  RequestStatusResponseStatus[\"Rejected\"] = \"rejected\";\n  RequestStatusResponseStatus[\"Unknown\"] = \"unknown\";\n  RequestStatusResponseStatus[\"Done\"] = \"done\";\n})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n// Root public key for the IC, encoded as hex\nconst IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' + 'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' + '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' + 'b01291091c5f87b98883463f98091a0baaae';\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\nclass HttpDefaultFetchError extends AgentError {\n  constructor(message) {\n    super(message);\n    this.message = message;\n  }\n}\nexport class IdentityInvalidError extends AgentError {\n  constructor(message) {\n    super(message);\n    this.message = message;\n  }\n}\nfunction getDefaultFetch() {\n  let defaultFetch;\n  if (typeof window !== 'undefined') {\n    // Browser context\n    if (window.fetch) {\n      defaultFetch = window.fetch.bind(window);\n    } else {\n      throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.');\n    }\n  } else if (typeof global !== 'undefined') {\n    // Node context\n    if (global.fetch) {\n      defaultFetch = global.fetch.bind(global);\n    } else {\n      throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.');\n    }\n  } else if (typeof self !== 'undefined') {\n    if (self.fetch) {\n      defaultFetch = self.fetch.bind(self);\n    }\n  }\n  if (defaultFetch) {\n    return defaultFetch;\n  }\n  throw new HttpDefaultFetchError('Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.');\n}\n// A HTTP agent allows users to interact with a client of the internet computer\n// using the available methods. It exposes an API that closely follows the\n// public view of the internet computer, and is not intended to be exposed\n// directly to the majority of users due to its low-level interface.\n//\n// There is a pipeline to apply transformations to the request before sending\n// it to the client. This is to decouple signature, nonce generation and\n// other computations so that this class can stay as simple as possible while\n// allowing extensions.\nexport class HttpAgent {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.rootKey = fromHex(IC_ROOT_KEY);\n    this._pipeline = [];\n    this._timeDiffMsecs = 0;\n    this._rootKeyFetched = false;\n    this._isAgent = true;\n    if (options.source) {\n      if (!(options.source instanceof HttpAgent)) {\n        throw new Error(\"An Agent's source can only be another HttpAgent\");\n      }\n      this._pipeline = [...options.source._pipeline];\n      this._identity = options.source._identity;\n      this._fetch = options.source._fetch;\n      this._host = options.source._host;\n      this._credentials = options.source._credentials;\n    } else {\n      this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n      this._fetchOptions = options.fetchOptions;\n      this._callOptions = options.callOptions;\n    }\n    if (options.host !== undefined) {\n      if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n        this._host = new URL(window.location.protocol + '//' + options.host);\n      } else {\n        this._host = new URL(options.host);\n      }\n    } else if (options.source !== undefined) {\n      // Safe to ignore here.\n      this._host = options.source._host;\n    } else {\n      const location = typeof window !== 'undefined' ? window.location : undefined;\n      if (!location) {\n        this._host = new URL('https://icp-api.io');\n        console.warn('Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.');\n      }\n      // Mainnet and local will have the api route available\n      const knownHosts = ['ic0.app', 'icp0.io', 'localhost', '127.0.0.1'];\n      const hostname = location === null || location === void 0 ? void 0 : location.hostname;\n      let knownHost;\n      if (hostname && typeof hostname === 'string') {\n        knownHost = knownHosts.find(host => hostname.endsWith(host));\n      }\n      if (location && knownHost) {\n        // If the user is on a boundary-node provided host, we can use the same host for the agent\n        this._host = new URL(`${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`);\n      } else {\n        this._host = new URL('https://icp-api.io');\n        console.warn('Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.');\n      }\n    }\n    // Default is 3, only set from option if greater or equal to 0\n    this._retryTimes = options.retryTimes !== undefined && options.retryTimes >= 0 ? options.retryTimes : 3;\n    // Rewrite to avoid redirects\n    if (this._host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n      this._host.hostname = IC0_DOMAIN;\n    } else if (this._host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n      this._host.hostname = ICP0_DOMAIN;\n    } else if (this._host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n      this._host.hostname = ICP_API_DOMAIN;\n    }\n    if (options.credentials) {\n      const {\n        name,\n        password\n      } = options.credentials;\n      this._credentials = `${name}${password ? ':' + password : ''}`;\n    }\n    this._identity = Promise.resolve(options.identity || new AnonymousIdentity());\n    // Add a nonce transform to ensure calls are unique\n    if (!options.disableNonce) {\n      this.addTransform(makeNonceTransform(makeNonce));\n    }\n  }\n  isLocal() {\n    const hostname = this._host.hostname;\n    return hostname === '127.0.0.1' || hostname.endsWith('localhost');\n  }\n  addTransform(fn) {\n    let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fn.priority || 0;\n    // Keep the pipeline sorted at all time, by priority.\n    const i = this._pipeline.findIndex(x => (x.priority || 0) < priority);\n    this._pipeline.splice(i >= 0 ? i : this._pipeline.length, 0, Object.assign(fn, {\n      priority\n    }));\n  }\n  async getPrincipal() {\n    if (!this._identity) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    return (await this._identity).getPrincipal();\n  }\n  async call(canisterId, options, identity) {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    const canister = Principal.from(canisterId);\n    const ecid = options.effectiveCanisterId ? Principal.from(options.effectiveCanisterId) : canister;\n    const sender = id.getPrincipal() || Principal.anonymous();\n    let ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);\n    // If the value is off by more than 30 seconds, reconcile system time with the network\n    if (Math.abs(this._timeDiffMsecs) > 1000 * 30) {\n      ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS + this._timeDiffMsecs);\n    }\n    const submit = {\n      request_type: SubmitRequestType.Call,\n      canister_id: canister,\n      method_name: options.methodName,\n      arg: options.arg,\n      sender,\n      ingress_expiry\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let transformedRequest = await this._transform({\n      request: {\n        body: null,\n        method: 'POST',\n        headers: Object.assign({\n          'Content-Type': 'application/cbor'\n        }, this._credentials ? {\n          Authorization: 'Basic ' + btoa(this._credentials)\n        } : {})\n      },\n      endpoint: \"call\" /* Endpoint.Call */,\n      body: submit\n    });\n    // Apply transform for identity.\n    transformedRequest = await id.transformRequest(transformedRequest);\n    const body = cbor.encode(transformedRequest.body);\n    // Run both in parallel. The fetch is quite expensive, so we have plenty of time to\n    // calculate the requestId locally.\n    const request = this._requestAndRetry(() => this._fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), Object.assign(Object.assign(Object.assign({}, this._callOptions), transformedRequest.request), {\n      body\n    })));\n    const [response, requestId] = await Promise.all([request, requestIdOf(submit)]);\n    const responseBuffer = await response.arrayBuffer();\n    const responseBody = response.status === 200 && responseBuffer.byteLength > 0 ? cbor.decode(responseBuffer) : null;\n    return {\n      requestId,\n      response: {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        body: responseBody,\n        headers: httpHeadersTransform(response.headers)\n      }\n    };\n  }\n  async _requestAndRetry(request) {\n    let tries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const response = await request();\n    if (response.ok) {\n      return response;\n    }\n    const responseText = await response.clone().text();\n    const errorMessage = `Server returned an error:\\n` + `  Code: ${response.status} (${response.statusText})\\n` + `  Body: ${responseText}\\n`;\n    if (this._retryTimes > tries) {\n      console.warn(errorMessage + `  Retrying request.`);\n      return await this._requestAndRetry(request, tries + 1);\n    }\n    throw new AgentHTTPResponseError(errorMessage, {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      headers: httpHeadersTransform(response.headers)\n    });\n  }\n  async query(canisterId, fields, identity) {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous();\n    const request = {\n      request_type: \"query\" /* ReadRequestType.Query */,\n      canister_id: canister,\n      method_name: fields.methodName,\n      arg: fields.arg,\n      sender,\n      ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)\n    };\n    // TODO: remove this any. This can be a Signed or UnSigned request.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: Object.assign({\n          'Content-Type': 'application/cbor'\n        }, this._credentials ? {\n          Authorization: 'Basic ' + btoa(this._credentials)\n        } : {})\n      },\n      endpoint: \"read\" /* Endpoint.Query */,\n      body: request\n    });\n    // Apply transform for identity.\n    transformedRequest = await (id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest));\n    const body = cbor.encode(transformedRequest.body);\n    const response = await this._requestAndRetry(() => this._fetch('' + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), {\n      body\n    })));\n    const queryResponse = cbor.decode(await response.arrayBuffer());\n    return Object.assign(Object.assign({}, queryResponse), {\n      httpDetails: {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        headers: httpHeadersTransform(response.headers)\n      }\n    });\n  }\n  async createReadStateRequest(fields, identity) {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous();\n    // TODO: remove this any. This can be a Signed or UnSigned request.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: Object.assign({\n          'Content-Type': 'application/cbor'\n        }, this._credentials ? {\n          Authorization: 'Basic ' + btoa(this._credentials)\n        } : {})\n      },\n      endpoint: \"read_state\" /* Endpoint.ReadState */,\n      body: {\n        request_type: \"read_state\" /* ReadRequestType.ReadState */,\n        paths: fields.paths,\n        sender,\n        ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)\n      }\n    });\n    // Apply transform for identity.\n    return id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest);\n  }\n  async readState(canisterId, fields, identity,\n  // eslint-disable-next-line\n  request) {\n    const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n    const transformedRequest = request !== null && request !== void 0 ? request : await this.createReadStateRequest(fields, identity);\n    const body = cbor.encode(transformedRequest.body);\n    // TODO - https://dfinity.atlassian.net/browse/SDK-1092\n    const response = await this._requestAndRetry(() => this._fetch('' + new URL(`/api/v2/canister/${canister}/read_state`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), {\n      body\n    })));\n    if (!response.ok) {\n      throw new Error(`Server returned an error:\\n` + `  Code: ${response.status} (${response.statusText})\\n` + `  Body: ${await response.text()}\\n`);\n    }\n    return cbor.decode(await response.arrayBuffer());\n  }\n  /**\n   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n   * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n   */\n  async syncTime(canisterId) {\n    const CanisterStatus = await import('../../canisterStatus');\n    const callTime = Date.now();\n    try {\n      if (!canisterId) {\n        console.log('Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai');\n      }\n      const status = await CanisterStatus.request({\n        // Fall back with canisterId of the ICP Ledger\n        canisterId: canisterId !== null && canisterId !== void 0 ? canisterId : Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n        agent: this,\n        paths: ['time']\n      });\n      const replicaTime = status.get('time');\n      if (replicaTime) {\n        this._timeDiffMsecs = Number(replicaTime) - Number(callTime);\n      }\n    } catch (error) {\n      console.error('Caught exception while attempting to sync time:', error);\n    }\n  }\n  async status() {\n    const headers = this._credentials ? {\n      Authorization: 'Basic ' + btoa(this._credentials)\n    } : {};\n    const response = await this._requestAndRetry(() => this._fetch('' + new URL(`/api/v2/status`, this._host), Object.assign({\n      headers\n    }, this._fetchOptions)));\n    return cbor.decode(await response.arrayBuffer());\n  }\n  async fetchRootKey() {\n    if (!this._rootKeyFetched) {\n      // Hex-encoded version of the replica root key\n      this.rootKey = (await this.status()).root_key;\n      this._rootKeyFetched = true;\n    }\n    return this.rootKey;\n  }\n  invalidateIdentity() {\n    this._identity = null;\n  }\n  replaceIdentity(identity) {\n    this._identity = Promise.resolve(identity);\n  }\n  _transform(request) {\n    let p = Promise.resolve(request);\n    for (const fn of this._pipeline) {\n      p = p.then(r => fn(r).then(r2 => r2 || r));\n    }\n    return p;\n  }\n}","map":{"version":3,"names":["Principal","AgentError","AnonymousIdentity","cbor","requestIdOf","fromHex","Expiry","httpHeadersTransform","makeNonceTransform","makeNonce","SubmitRequestType","AgentHTTPResponseError","RequestStatusResponseStatus","DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS","IC_ROOT_KEY","IC0_DOMAIN","IC0_SUB_DOMAIN","ICP0_DOMAIN","ICP0_SUB_DOMAIN","ICP_API_DOMAIN","ICP_API_SUB_DOMAIN","HttpDefaultFetchError","constructor","message","IdentityInvalidError","getDefaultFetch","defaultFetch","window","fetch","bind","global","self","HttpAgent","options","arguments","length","undefined","rootKey","_pipeline","_timeDiffMsecs","_rootKeyFetched","_isAgent","source","Error","_identity","_fetch","_host","_credentials","_fetchOptions","fetchOptions","_callOptions","callOptions","host","match","URL","location","protocol","console","warn","knownHosts","hostname","knownHost","find","endsWith","port","_retryTimes","retryTimes","credentials","name","password","Promise","resolve","identity","disableNonce","addTransform","isLocal","fn","priority","i","findIndex","x","splice","Object","assign","getPrincipal","call","canisterId","id","canister","from","ecid","effectiveCanisterId","sender","anonymous","ingress_expiry","Math","abs","submit","request_type","Call","canister_id","method_name","methodName","arg","transformedRequest","_transform","request","body","method","headers","Authorization","btoa","endpoint","transformRequest","encode","_requestAndRetry","toText","response","requestId","all","responseBuffer","arrayBuffer","responseBody","status","byteLength","decode","ok","statusText","tries","responseText","clone","text","errorMessage","query","fields","fromText","queryResponse","httpDetails","createReadStateRequest","paths","readState","syncTime","CanisterStatus","callTime","Date","now","log","agent","replicaTime","get","Number","error","fetchRootKey","root_key","invalidateIdentity","replaceIdentity","p","then","r","r2"],"sources":["/Users/ridhoauliarahman/Library/CloudStorage/GoogleDrive-ridho.aulia7324@gmail.com/My Drive/ICP/icp-chat-app/src/frontend/node_modules/@dfinity/agent/src/agent/http/index.ts"],"sourcesContent":["import { JsonObject } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../../errors';\nimport { AnonymousIdentity, Identity } from '../../auth';\nimport * as cbor from '../../cbor';\nimport { requestIdOf } from '../../request_id';\nimport { fromHex } from '../../utils/buffer';\nimport {\n  Agent,\n  ApiQueryResponse,\n  QueryFields,\n  QueryResponse,\n  ReadStateOptions,\n  ReadStateResponse,\n  SubmitResponse,\n} from '../api';\nimport { Expiry, httpHeadersTransform, makeNonceTransform } from './transforms';\nimport {\n  CallRequest,\n  Endpoint,\n  HttpAgentRequest,\n  HttpAgentRequestTransformFn,\n  HttpAgentSubmitRequest,\n  makeNonce,\n  QueryRequest,\n  ReadRequestType,\n  SubmitRequestType,\n} from './types';\nimport { AgentHTTPResponseError } from './errors';\n\nexport * from './transforms';\nexport { Nonce, makeNonce } from './types';\n\nexport enum RequestStatusResponseStatus {\n  Received = 'received',\n  Processing = 'processing',\n  Replied = 'replied',\n  Rejected = 'rejected',\n  Unknown = 'unknown',\n  Done = 'done',\n}\n\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n\n// Root public key for the IC, encoded as hex\nconst IC_ROOT_KEY =\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n  'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n  '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n  'b01291091c5f87b98883463f98091a0baaae';\n\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\n\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\n\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\n\nclass HttpDefaultFetchError extends AgentError {\n  constructor(public readonly message: string) {\n    super(message);\n  }\n}\nexport class IdentityInvalidError extends AgentError {\n  constructor(public readonly message: string) {\n    super(message);\n  }\n}\n\n// HttpAgent options that can be used at construction.\nexport interface HttpAgentOptions {\n  // Another HttpAgent to inherit configuration (pipeline and fetch) of. This\n  // is only used at construction.\n  source?: HttpAgent;\n\n  // A surrogate to the global fetch function. Useful for testing.\n  fetch?: typeof fetch;\n\n  // Additional options to pass along to fetch. Will not override fields that\n  // the agent already needs to set\n  // Should follow the RequestInit interface, but we intentially support non-standard fields\n  fetchOptions?: Record<string, unknown>;\n\n  // Additional options to pass along to fetch for the call API.\n  callOptions?: Record<string, unknown>;\n\n  // The host to use for the client. By default, uses the same host as\n  // the current page.\n  host?: string;\n\n  // The principal used to send messages. This cannot be empty at the request\n  // time (will throw).\n  identity?: Identity | Promise<Identity>;\n\n  credentials?: {\n    name: string;\n    password?: string;\n  };\n  /**\n   * Prevents the agent from providing a unique {@link Nonce} with each call.\n   * Enabling may cause rate limiting of identical requests\n   * at the boundary nodes.\n   *\n   * To add your own nonce generation logic, you can use the following:\n   * @example\n   * import {makeNonceTransform, makeNonce} from '@dfinity/agent';\n   * const agent = new HttpAgent({ disableNonce: true });\n   * agent.addTransform(makeNonceTransform(makeNonce);\n   * @default false\n   */\n  disableNonce?: boolean;\n  /**\n   * Number of times to retry requests before throwing an error\n   * @default 3\n   */\n  retryTimes?: number;\n}\n\nfunction getDefaultFetch(): typeof fetch {\n  let defaultFetch;\n\n  if (typeof window !== 'undefined') {\n    // Browser context\n    if (window.fetch) {\n      defaultFetch = window.fetch.bind(window);\n    } else {\n      throw new HttpDefaultFetchError(\n        'Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.',\n      );\n    }\n  } else if (typeof global !== 'undefined') {\n    // Node context\n    if (global.fetch) {\n      defaultFetch = global.fetch.bind(global);\n    } else {\n      throw new HttpDefaultFetchError(\n        'Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.',\n      );\n    }\n  } else if (typeof self !== 'undefined') {\n    if (self.fetch) {\n      defaultFetch = self.fetch.bind(self);\n    }\n  }\n\n  if (defaultFetch) {\n    return defaultFetch;\n  }\n  throw new HttpDefaultFetchError(\n    'Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.',\n  );\n}\n\n// A HTTP agent allows users to interact with a client of the internet computer\n// using the available methods. It exposes an API that closely follows the\n// public view of the internet computer, and is not intended to be exposed\n// directly to the majority of users due to its low-level interface.\n//\n// There is a pipeline to apply transformations to the request before sending\n// it to the client. This is to decouple signature, nonce generation and\n// other computations so that this class can stay as simple as possible while\n// allowing extensions.\nexport class HttpAgent implements Agent {\n  public rootKey = fromHex(IC_ROOT_KEY);\n  private readonly _pipeline: HttpAgentRequestTransformFn[] = [];\n  private _identity: Promise<Identity> | null;\n  private readonly _fetch: typeof fetch;\n  private readonly _fetchOptions?: Record<string, unknown>;\n  private readonly _callOptions?: Record<string, unknown>;\n  private _timeDiffMsecs = 0;\n  private readonly _host: URL;\n  private readonly _credentials: string | undefined;\n  private _rootKeyFetched = false;\n  private readonly _retryTimes; // Retry requests N times before erroring by default\n  public readonly _isAgent = true;\n\n  constructor(options: HttpAgentOptions = {}) {\n    if (options.source) {\n      if (!(options.source instanceof HttpAgent)) {\n        throw new Error(\"An Agent's source can only be another HttpAgent\");\n      }\n      this._pipeline = [...options.source._pipeline];\n      this._identity = options.source._identity;\n      this._fetch = options.source._fetch;\n      this._host = options.source._host;\n      this._credentials = options.source._credentials;\n    } else {\n      this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n      this._fetchOptions = options.fetchOptions;\n      this._callOptions = options.callOptions;\n    }\n    if (options.host !== undefined) {\n      if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n        this._host = new URL(window.location.protocol + '//' + options.host);\n      } else {\n        this._host = new URL(options.host);\n      }\n    } else if (options.source !== undefined) {\n      // Safe to ignore here.\n      this._host = options.source._host;\n    } else {\n      const location = typeof window !== 'undefined' ? window.location : undefined;\n      if (!location) {\n        this._host = new URL('https://icp-api.io');\n        console.warn(\n          'Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.',\n        );\n      }\n      // Mainnet and local will have the api route available\n      const knownHosts = ['ic0.app', 'icp0.io', 'localhost', '127.0.0.1'];\n      const hostname = location?.hostname;\n      let knownHost;\n      if (hostname && typeof hostname === 'string') {\n        knownHost = knownHosts.find(host => hostname.endsWith(host));\n      }\n\n      if (location && knownHost) {\n        // If the user is on a boundary-node provided host, we can use the same host for the agent\n        this._host = new URL(\n          `${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`,\n        );\n      } else {\n        this._host = new URL('https://icp-api.io');\n        console.warn(\n          'Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.',\n        );\n      }\n    }\n    // Default is 3, only set from option if greater or equal to 0\n    this._retryTimes =\n      options.retryTimes !== undefined && options.retryTimes >= 0 ? options.retryTimes : 3;\n    // Rewrite to avoid redirects\n    if (this._host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n      this._host.hostname = IC0_DOMAIN;\n    } else if (this._host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n      this._host.hostname = ICP0_DOMAIN;\n    } else if (this._host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n      this._host.hostname = ICP_API_DOMAIN;\n    }\n\n    if (options.credentials) {\n      const { name, password } = options.credentials;\n      this._credentials = `${name}${password ? ':' + password : ''}`;\n    }\n    this._identity = Promise.resolve(options.identity || new AnonymousIdentity());\n\n    // Add a nonce transform to ensure calls are unique\n    if (!options.disableNonce) {\n      this.addTransform(makeNonceTransform(makeNonce));\n    }\n  }\n\n  public isLocal(): boolean {\n    const hostname = this._host.hostname;\n    return hostname === '127.0.0.1' || hostname.endsWith('localhost');\n  }\n\n  public addTransform(fn: HttpAgentRequestTransformFn, priority = fn.priority || 0): void {\n    // Keep the pipeline sorted at all time, by priority.\n    const i = this._pipeline.findIndex(x => (x.priority || 0) < priority);\n    this._pipeline.splice(i >= 0 ? i : this._pipeline.length, 0, Object.assign(fn, { priority }));\n  }\n\n  public async getPrincipal(): Promise<Principal> {\n    if (!this._identity) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    return (await this._identity).getPrincipal();\n  }\n\n  public async call(\n    canisterId: Principal | string,\n    options: {\n      methodName: string;\n      arg: ArrayBuffer;\n      effectiveCanisterId?: Principal | string;\n    },\n    identity?: Identity | Promise<Identity>,\n  ): Promise<SubmitResponse> {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    const canister = Principal.from(canisterId);\n    const ecid = options.effectiveCanisterId\n      ? Principal.from(options.effectiveCanisterId)\n      : canister;\n\n    const sender: Principal = id.getPrincipal() || Principal.anonymous();\n\n    let ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);\n\n    // If the value is off by more than 30 seconds, reconcile system time with the network\n    if (Math.abs(this._timeDiffMsecs) > 1_000 * 30) {\n      ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS + this._timeDiffMsecs);\n    }\n\n    const submit: CallRequest = {\n      request_type: SubmitRequestType.Call,\n      canister_id: canister,\n      method_name: options.methodName,\n      arg: options.arg,\n      sender,\n      ingress_expiry,\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let transformedRequest: any = (await this._transform({\n      request: {\n        body: null,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.Call,\n      body: submit,\n    })) as HttpAgentSubmitRequest;\n\n    // Apply transform for identity.\n    transformedRequest = await id.transformRequest(transformedRequest);\n\n    const body = cbor.encode(transformedRequest.body);\n\n    // Run both in parallel. The fetch is quite expensive, so we have plenty of time to\n    // calculate the requestId locally.\n    const request = this._requestAndRetry(() =>\n      this._fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), {\n        ...this._callOptions,\n        ...transformedRequest.request,\n        body,\n      }),\n    );\n\n    const [response, requestId] = await Promise.all([request, requestIdOf(submit)]);\n\n    const responseBuffer = await response.arrayBuffer();\n    const responseBody = (\n      response.status === 200 && responseBuffer.byteLength > 0 ? cbor.decode(responseBuffer) : null\n    ) as SubmitResponse['response']['body'];\n\n    return {\n      requestId,\n      response: {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        body: responseBody,\n        headers: httpHeadersTransform(response.headers),\n      },\n    };\n  }\n\n  private async _requestAndRetry(request: () => Promise<Response>, tries = 0): Promise<Response> {\n    const response = await request();\n    if (response.ok) {\n      return response;\n    }\n\n    const responseText = await response.clone().text();\n    const errorMessage =\n      `Server returned an error:\\n` +\n      `  Code: ${response.status} (${response.statusText})\\n` +\n      `  Body: ${responseText}\\n`;\n\n    if (this._retryTimes > tries) {\n      console.warn(errorMessage + `  Retrying request.`);\n      return await this._requestAndRetry(request, tries + 1);\n    }\n\n    throw new AgentHTTPResponseError(errorMessage, {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      headers: httpHeadersTransform(response.headers),\n    });\n  }\n\n  public async query(\n    canisterId: Principal | string,\n    fields: QueryFields,\n    identity?: Identity | Promise<Identity>,\n  ): Promise<ApiQueryResponse> {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n\n    const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n    const sender = id?.getPrincipal() || Principal.anonymous();\n\n    const request: QueryRequest = {\n      request_type: ReadRequestType.Query,\n      canister_id: canister,\n      method_name: fields.methodName,\n      arg: fields.arg,\n      sender,\n      ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n    };\n\n    // TODO: remove this any. This can be a Signed or UnSigned request.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let transformedRequest: any = await this._transform({\n      request: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.Query,\n      body: request,\n    });\n\n    // Apply transform for identity.\n    transformedRequest = await id?.transformRequest(transformedRequest);\n\n    const body = cbor.encode(transformedRequest.body);\n    const response = await this._requestAndRetry(() =>\n      this._fetch('' + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), {\n        ...this._fetchOptions,\n        ...transformedRequest.request,\n        body,\n      }),\n    );\n\n    const queryResponse: QueryResponse = cbor.decode(await response.arrayBuffer());\n\n    return {\n      ...queryResponse,\n      httpDetails: {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        headers: httpHeadersTransform(response.headers),\n      },\n    };\n  }\n\n  public async createReadStateRequest(\n    fields: ReadStateOptions,\n    identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    const sender = id?.getPrincipal() || Principal.anonymous();\n\n    // TODO: remove this any. This can be a Signed or UnSigned request.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const transformedRequest: any = await this._transform({\n      request: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.ReadState,\n      body: {\n        request_type: ReadRequestType.ReadState,\n        paths: fields.paths,\n        sender,\n        ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n      },\n    });\n\n    // Apply transform for identity.\n    return id?.transformRequest(transformedRequest);\n  }\n\n  public async readState(\n    canisterId: Principal | string,\n    fields: ReadStateOptions,\n    identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line\n    request?: any,\n  ): Promise<ReadStateResponse> {\n    const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n\n    const transformedRequest = request ?? (await this.createReadStateRequest(fields, identity));\n    const body = cbor.encode(transformedRequest.body);\n\n    // TODO - https://dfinity.atlassian.net/browse/SDK-1092\n    const response = await this._requestAndRetry(() =>\n      this._fetch('' + new URL(`/api/v2/canister/${canister}/read_state`, this._host), {\n        ...this._fetchOptions,\n        ...transformedRequest.request,\n        body,\n      }),\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Server returned an error:\\n` +\n          `  Code: ${response.status} (${response.statusText})\\n` +\n          `  Body: ${await response.text()}\\n`,\n      );\n    }\n    return cbor.decode(await response.arrayBuffer());\n  }\n\n  /**\n   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n   * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n   */\n  public async syncTime(canisterId?: Principal): Promise<void> {\n    const CanisterStatus = await import('../../canisterStatus');\n    const callTime = Date.now();\n    try {\n      if (!canisterId) {\n        console.log(\n          'Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai',\n        );\n      }\n      const status = await CanisterStatus.request({\n        // Fall back with canisterId of the ICP Ledger\n        canisterId: canisterId ?? Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n        agent: this,\n        paths: ['time'],\n      });\n\n      const replicaTime = status.get('time');\n      if (replicaTime) {\n        this._timeDiffMsecs = Number(replicaTime as any) - Number(callTime);\n      }\n    } catch (error) {\n      console.error('Caught exception while attempting to sync time:', error);\n    }\n  }\n\n  public async status(): Promise<JsonObject> {\n    const headers: Record<string, string> = this._credentials\n      ? {\n          Authorization: 'Basic ' + btoa(this._credentials),\n        }\n      : {};\n\n    const response = await this._requestAndRetry(() =>\n      this._fetch('' + new URL(`/api/v2/status`, this._host), { headers, ...this._fetchOptions }),\n    );\n\n    return cbor.decode(await response.arrayBuffer());\n  }\n\n  public async fetchRootKey(): Promise<ArrayBuffer> {\n    if (!this._rootKeyFetched) {\n      // Hex-encoded version of the replica root key\n      this.rootKey = ((await this.status()) as any).root_key;\n      this._rootKeyFetched = true;\n    }\n    return this.rootKey;\n  }\n\n  public invalidateIdentity(): void {\n    this._identity = null;\n  }\n\n  public replaceIdentity(identity: Identity): void {\n    this._identity = Promise.resolve(identity);\n  }\n\n  protected _transform(request: HttpAgentRequest): Promise<HttpAgentRequest> {\n    let p = Promise.resolve(request);\n\n    for (const fn of this._pipeline) {\n      p = p.then(r => fn(r).then(r2 => r2 || r));\n    }\n\n    return p;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}