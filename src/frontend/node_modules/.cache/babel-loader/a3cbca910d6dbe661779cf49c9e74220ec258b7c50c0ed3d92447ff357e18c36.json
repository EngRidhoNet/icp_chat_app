{"ast":null,"code":"/** @module CanisterStatus */\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../errors';\nimport { Certificate } from '../certificate';\nimport { toHex } from '../utils/buffer';\nimport * as Cbor from '../cbor';\nimport { decodeLeb128, decodeTime } from '../utils/leb';\n/**\n *\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async options => {\n  const {\n    canisterId,\n    agent,\n    paths\n  } = options;\n  const uniquePaths = [...new Set(paths)];\n  // Map path options to their correct formats\n  const encodedPaths = uniquePaths.map(path => {\n    return encodePath(path, canisterId);\n  });\n  const status = new Map();\n  const promises = uniquePaths.map((path, index) => {\n    return (async () => {\n      var _a;\n      try {\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPaths[index]]\n        });\n        const cert = await Certificate.create({\n          certificate: response.certificate,\n          rootKey: agent.rootKey,\n          canisterId: canisterId\n        });\n        const data = cert.lookup(encodePath(uniquePaths[index], canisterId));\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time':\n              {\n                status.set(path, decodeTime(data));\n                break;\n              }\n            case 'controllers':\n              {\n                status.set(path, decodeControllers(data));\n                break;\n              }\n            case 'module_hash':\n              {\n                status.set(path, decodeHex(data));\n                break;\n              }\n            case 'candid':\n              {\n                status.set(path, new TextDecoder().decode(data));\n                break;\n              }\n            default:\n              {\n                // Check for CustomPath signature\n                if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                  switch (path.decodeStrategy) {\n                    case 'raw':\n                      status.set(path.key, data);\n                      break;\n                    case 'leb128':\n                      {\n                        status.set(path.key, decodeLeb128(data));\n                        break;\n                      }\n                    case 'cbor':\n                      {\n                        status.set(path.key, decodeCbor(data));\n                        break;\n                      }\n                    case 'hex':\n                      {\n                        status.set(path.key, decodeHex(data));\n                        break;\n                      }\n                    case 'utf-8':\n                      {\n                        status.set(path.key, decodeUtf8(data));\n                      }\n                  }\n                }\n              }\n          }\n        }\n      } catch (error) {\n        // Break on signature verification errors\n        if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes('Invalid certificate')) {\n          throw new AgentError(error.message);\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n  return status;\n};\nexport const encodePath = (path, canisterId) => {\n  const encoder = new TextEncoder();\n  const encode = arg => {\n    return new DataView(encoder.encode(arg).buffer).buffer;\n  };\n  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n  switch (path) {\n    case 'time':\n      return [encode('time')];\n    case 'controllers':\n      return [encode('canister'), canisterBuffer, encode('controllers')];\n    case 'module_hash':\n      return [encode('canister'), canisterBuffer, encode('module_hash')];\n    case 'subnet':\n      return [encode('subnet')];\n    case 'candid':\n      return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n    default:\n      {\n        // Check for CustomPath signature\n        if ('key' in path && 'path' in path) {\n          // For simplified metadata queries\n          if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n            const metaPath = path.path;\n            const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n            return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n            // For non-metadata, return the provided custompath\n          } else {\n            return path['path'];\n          }\n        }\n      }\n  }\n  throw new Error(`An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`);\n};\nconst decodeHex = buf => {\n  return toHex(buf);\n};\nconst decodeCbor = buf => {\n  return Cbor.decode(buf);\n};\nconst decodeUtf8 = buf => {\n  return new TextDecoder().decode(buf);\n};\n// Controllers are CBOR-encoded buffers, starting with a Tag we don't need\nconst decodeControllers = buf => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [tag, ...controllersRaw] = decodeCbor(buf);\n  return controllersRaw.map(buf => {\n    return Principal.fromUint8Array(new Uint8Array(buf));\n  });\n};","map":{"version":3,"names":["Principal","AgentError","Certificate","toHex","Cbor","decodeLeb128","decodeTime","request","options","canisterId","agent","paths","uniquePaths","Set","encodedPaths","map","path","encodePath","status","Map","promises","index","response","readState","cert","create","certificate","rootKey","data","lookup","console","warn","set","key","decodeControllers","decodeHex","TextDecoder","decode","decodeStrategy","decodeCbor","decodeUtf8","error","_a","message","includes","group","groupEnd","Promise","all","encoder","TextEncoder","encode","arg","DataView","buffer","canisterBuffer","toUint8Array","ArrayBuffer","metaPath","encoded","Error","buf","tag","controllersRaw","fromUint8Array","Uint8Array"],"sources":["/Users/ridhoauliarahman/Library/CloudStorage/GoogleDrive-ridho.aulia7324@gmail.com/My Drive/ICP/icp-chat-app/src/frontend/node_modules/@dfinity/agent/src/canisterStatus/index.ts"],"sourcesContent":["/** @module CanisterStatus */\n\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../errors';\nimport { HttpAgent } from '../agent/http';\nimport { Certificate, CreateCertificateOptions } from '../certificate';\nimport { toHex } from '../utils/buffer';\nimport * as Cbor from '../cbor';\nimport { decodeLeb128, decodeTime } from '../utils/leb';\n\n/**\n * Types of an entry on the canisterStatus map.\n * An entry of null indicates that the request failed, due to lack of permissions or the result being missing.\n */\nexport type Status = string | ArrayBuffer | Date | ArrayBuffer[] | Principal[] | bigint | null;\n\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using {@link TextEncoder}\n */\nexport interface CustomPath {\n  key: string;\n  path: ArrayBuffer[] | string;\n  decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n}\n\n/**\n * Interface to request metadata from the icp:public or icp:private sections.\n * Similar to {@link CustomPath}, but accepts a simple string argument.\n * Private metadata will require the ${@link Identity} used by the ${@link HttpAgent} will need to be requested using an identity that controlls the canister.\n */\nexport interface MetaData {\n  kind: 'metadata';\n  key: string;\n  path: string | ArrayBuffer;\n  decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n}\n\n/**\n * Pre-configured fields for canister status paths\n */\nexport type Path =\n  | 'time'\n  | 'controllers'\n  | 'subnet'\n  | 'module_hash'\n  | 'candid'\n  | MetaData\n  | CustomPath;\n\nexport type StatusMap = Map<Path | string, Status>;\n\nexport type CanisterStatusOptions = {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n  blsVerify?: CreateCertificateOptions['blsVerify'];\n};\n\n/**\n *\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async (options: {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n}): Promise<StatusMap> => {\n  const { canisterId, agent, paths } = options;\n\n  const uniquePaths = [...new Set(paths)];\n\n  // Map path options to their correct formats\n  const encodedPaths = uniquePaths.map(path => {\n    return encodePath(path, canisterId);\n  });\n  const status = new Map<string | Path, Status>();\n\n  const promises = uniquePaths.map((path, index) => {\n    return (async () => {\n      try {\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPaths[index]],\n        });\n        const cert = await Certificate.create({\n          certificate: response.certificate,\n          rootKey: agent.rootKey,\n          canisterId: canisterId,\n        });\n\n        const data = cert.lookup(encodePath(uniquePaths[index], canisterId));\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time': {\n              status.set(path, decodeTime(data));\n              break;\n            }\n            case 'controllers': {\n              status.set(path, decodeControllers(data));\n              break;\n            }\n            case 'module_hash': {\n              status.set(path, decodeHex(data));\n              break;\n            }\n            case 'candid': {\n              status.set(path, new TextDecoder().decode(data));\n              break;\n            }\n            default: {\n              // Check for CustomPath signature\n              if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                switch (path.decodeStrategy) {\n                  case 'raw':\n                    status.set(path.key, data);\n                    break;\n                  case 'leb128': {\n                    status.set(path.key, decodeLeb128(data));\n                    break;\n                  }\n                  case 'cbor': {\n                    status.set(path.key, decodeCbor(data));\n                    break;\n                  }\n                  case 'hex': {\n                    status.set(path.key, decodeHex(data));\n                    break;\n                  }\n                  case 'utf-8': {\n                    status.set(path.key, decodeUtf8(data));\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // Break on signature verification errors\n        if ((error as AgentError)?.message?.includes('Invalid certificate')) {\n          throw new AgentError((error as AgentError).message);\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n\n  return status;\n};\n\nexport const encodePath = (path: Path, canisterId: Principal): ArrayBuffer[] => {\n  const encoder = new TextEncoder();\n\n  const encode = (arg: string): ArrayBuffer => {\n    return new DataView(encoder.encode(arg).buffer).buffer;\n  };\n  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n  switch (path) {\n    case 'time':\n      return [encode('time')];\n    case 'controllers':\n      return [encode('canister'), canisterBuffer, encode('controllers')];\n    case 'module_hash':\n      return [encode('canister'), canisterBuffer, encode('module_hash')];\n    case 'subnet':\n      return [encode('subnet')];\n    case 'candid':\n      return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n    default: {\n      // Check for CustomPath signature\n      if ('key' in path && 'path' in path) {\n        // For simplified metadata queries\n        if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n          const metaPath = path.path;\n          const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n\n          return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n\n          // For non-metadata, return the provided custompath\n        } else {\n          return path['path'];\n        }\n      }\n    }\n  }\n  throw new Error(\n    `An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`,\n  );\n};\n\nconst decodeHex = (buf: ArrayBuffer): string => {\n  return toHex(buf);\n};\n\nconst decodeCbor = (buf: ArrayBuffer): ArrayBuffer[] => {\n  return Cbor.decode(buf);\n};\n\nconst decodeUtf8 = (buf: ArrayBuffer): string => {\n  return new TextDecoder().decode(buf);\n};\n\n// Controllers are CBOR-encoded buffers, starting with a Tag we don't need\nconst decodeControllers = (buf: ArrayBuffer): Principal[] => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [tag, ...controllersRaw] = decodeCbor(buf);\n  return controllersRaw.map((buf: ArrayBuffer) => {\n    return Principal.fromUint8Array(new Uint8Array(buf));\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}