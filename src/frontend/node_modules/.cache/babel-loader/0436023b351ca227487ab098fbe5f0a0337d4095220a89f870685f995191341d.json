{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import chatAPI from'../services/api';import{useAuth}from'./useAuth';export const useChat=()=>{const{user}=useAuth();const[users,setUsers]=useState([]);const[groups,setGroups]=useState([]);const[messages,setMessages]=useState([]);const[activeChat,setActiveChat]=useState(null);const[activeChatType,setActiveChatType]=useState('direct');// 'direct' or 'group'\nconst[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Load users\nconst loadUsers=useCallback(async()=>{try{setLoading(true);const allUsers=await chatAPI.getAllUsers();const filteredUsers=allUsers.filter(u=>u.id!==(user===null||user===void 0?void 0:user.id));setUsers(filteredUsers);}catch(err){setError('Failed to load users');console.error('Load users error:',err);}finally{setLoading(false);}},[user===null||user===void 0?void 0:user.id]);// Load groups\nconst loadGroups=useCallback(async()=>{if(!user)return;try{setLoading(true);const userGroups=await chatAPI.getUserGroups(user.id);setGroups(userGroups);}catch(err){setError('Failed to load groups');console.error('Load groups error:',err);}finally{setLoading(false);}},[user===null||user===void 0?void 0:user.id]);// Load messages for active chat\nconst loadMessages=useCallback(async()=>{if(!activeChat||!user)return;try{setLoading(true);let chatMessages=[];if(activeChatType==='direct'){chatMessages=await chatAPI.getDirectMessages(user.id,activeChat.id);}else if(activeChatType==='group'){chatMessages=await chatAPI.getGroupMessages(activeChat.id);}setMessages(chatMessages);}catch(err){setError('Failed to load messages');console.error('Load messages error:',err);}finally{setLoading(false);}},[activeChat,activeChatType,user===null||user===void 0?void 0:user.id]);// Send message\nconst sendMessage=useCallback(async function(content){let messageType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{text:null};if(!activeChat||!user||!content.trim())return;try{let result;if(activeChatType==='direct'){result=await chatAPI.sendDirectMessage(user.id,activeChat.id,content,messageType);}else if(activeChatType==='group'){result=await chatAPI.sendGroupMessage(user.id,activeChat.id,content,messageType);}if('ok'in result){// Reload messages to get the new message\nawait loadMessages();return{success:true};}else{setError(result.err);return{success:false,error:result.err};}}catch(err){const errorMsg=err.message||'Failed to send message';setError(errorMsg);return{success:false,error:errorMsg};}},[activeChat,activeChatType,user===null||user===void 0?void 0:user.id,loadMessages]);// Create group\nconst createGroup=useCallback(async(name,description,memberIds)=>{if(!user)return;try{setLoading(true);const result=await chatAPI.createGroup(name,description,user.id,memberIds);if('ok'in result){await loadGroups();return{success:true,group:result.ok};}else{setError(result.err);return{success:false,error:result.err};}}catch(err){const errorMsg=err.message||'Failed to create group';setError(errorMsg);return{success:false,error:errorMsg};}finally{setLoading(false);}},[user===null||user===void 0?void 0:user.id,loadGroups]);// Open direct chat\nconst openDirectChat=useCallback(chatUser=>{setActiveChat(chatUser);setActiveChatType('direct');setMessages([]);},[]);// Open group chat\nconst openGroupChat=useCallback(group=>{setActiveChat(group);setActiveChatType('group');setMessages([]);},[]);// Initialize data\nuseEffect(()=>{if(user){loadUsers();loadGroups();}},[user,loadUsers,loadGroups]);// Load messages when active chat changes\nuseEffect(()=>{if(activeChat){loadMessages();// Set up polling for new messages\nconst interval=setInterval(()=>{loadMessages();},3000);// Poll every 3 seconds\nreturn()=>clearInterval(interval);}},[activeChat,loadMessages]);return{users,groups,messages,activeChat,activeChatType,loading,error,sendMessage,createGroup,openDirectChat,openGroupChat,loadUsers,loadGroups,loadMessages,setError};};","map":{"version":3,"names":["useState","useEffect","useCallback","chatAPI","useAuth","useChat","user","users","setUsers","groups","setGroups","messages","setMessages","activeChat","setActiveChat","activeChatType","setActiveChatType","loading","setLoading","error","setError","loadUsers","allUsers","getAllUsers","filteredUsers","filter","u","id","err","console","loadGroups","userGroups","getUserGroups","loadMessages","chatMessages","getDirectMessages","getGroupMessages","sendMessage","content","messageType","arguments","length","undefined","text","trim","result","sendDirectMessage","sendGroupMessage","success","errorMsg","message","createGroup","name","description","memberIds","group","ok","openDirectChat","chatUser","openGroupChat","interval","setInterval","clearInterval"],"sources":["/Users/ridhoauliarahman/Library/CloudStorage/GoogleDrive-ridho.aulia7324@gmail.com/My Drive/ICP/icp-chat-app/src/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport chatAPI from '../services/api';\nimport { useAuth } from './useAuth';\n\nexport const useChat = () => {\n  const { user } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n  const [activeChatType, setActiveChatType] = useState('direct'); // 'direct' or 'group'\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load users\n  const loadUsers = useCallback(async () => {\n    try {\n      setLoading(true);\n      const allUsers = await chatAPI.getAllUsers();\n      const filteredUsers = allUsers.filter(u => u.id !== user?.id);\n      setUsers(filteredUsers);\n    } catch (err) {\n      setError('Failed to load users');\n      console.error('Load users error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id]);\n\n  // Load groups\n  const loadGroups = useCallback(async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      const userGroups = await chatAPI.getUserGroups(user.id);\n      setGroups(userGroups);\n    } catch (err) {\n      setError('Failed to load groups');\n      console.error('Load groups error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id]);\n\n  // Load messages for active chat\n  const loadMessages = useCallback(async () => {\n    if (!activeChat || !user) return;\n    \n    try {\n      setLoading(true);\n      let chatMessages = [];\n      \n      if (activeChatType === 'direct') {\n        chatMessages = await chatAPI.getDirectMessages(user.id, activeChat.id);\n      } else if (activeChatType === 'group') {\n        chatMessages = await chatAPI.getGroupMessages(activeChat.id);\n      }\n      \n      setMessages(chatMessages);\n    } catch (err) {\n      setError('Failed to load messages');\n      console.error('Load messages error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [activeChat, activeChatType, user?.id]);\n\n  // Send message\n  const sendMessage = useCallback(async (content, messageType = { text: null }) => {\n    if (!activeChat || !user || !content.trim()) return;\n    \n    try {\n      let result;\n      \n      if (activeChatType === 'direct') {\n        result = await chatAPI.sendDirectMessage(user.id, activeChat.id, content, messageType);\n      } else if (activeChatType === 'group') {\n        result = await chatAPI.sendGroupMessage(user.id, activeChat.id, content, messageType);\n      }\n      \n      if ('ok' in result) {\n        // Reload messages to get the new message\n        await loadMessages();\n        return { success: true };\n      } else {\n        setError(result.err);\n        return { success: false, error: result.err };\n      }\n    } catch (err) {\n      const errorMsg = err.message || 'Failed to send message';\n      setError(errorMsg);\n      return { success: false, error: errorMsg };\n    }\n  }, [activeChat, activeChatType, user?.id, loadMessages]);\n\n  // Create group\n  const createGroup = useCallback(async (name, description, memberIds) => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      const result = await chatAPI.createGroup(name, description, user.id, memberIds);\n      \n      if ('ok' in result) {\n        await loadGroups();\n        return { success: true, group: result.ok };\n      } else {\n        setError(result.err);\n        return { success: false, error: result.err };\n      }\n    } catch (err) {\n      const errorMsg = err.message || 'Failed to create group';\n      setError(errorMsg);\n      return { success: false, error: errorMsg };\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id, loadGroups]);\n\n  // Open direct chat\n  const openDirectChat = useCallback((chatUser) => {\n    setActiveChat(chatUser);\n    setActiveChatType('direct');\n    setMessages([]);\n  }, []);\n\n  // Open group chat\n  const openGroupChat = useCallback((group) => {\n    setActiveChat(group);\n    setActiveChatType('group');\n    setMessages([]);\n  }, []);\n\n  // Initialize data\n  useEffect(() => {\n    if (user) {\n      loadUsers();\n      loadGroups();\n    }\n  }, [user, loadUsers, loadGroups]);\n\n  // Load messages when active chat changes\n  useEffect(() => {\n    if (activeChat) {\n      loadMessages();\n      \n      // Set up polling for new messages\n      const interval = setInterval(() => {\n        loadMessages();\n      }, 3000); // Poll every 3 seconds\n      \n      return () => clearInterval(interval);\n    }\n  }, [activeChat, loadMessages]);\n\n  return {\n    users,\n    groups,\n    messages,\n    activeChat,\n    activeChatType,\n    loading,\n    error,\n    sendMessage,\n    createGroup,\n    openDirectChat,\n    openGroupChat,\n    loadUsers,\n    loadGroups,\n    loadMessages,\n    setError\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}